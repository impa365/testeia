import { supabase } from "./supabase"

// Interface para os dados enviados ao criar/atualizar um bot individual
export interface EvolutionBotIndividualConfig {
  enabled: boolean
  description: string
  apiUrl: string
  apiKey?: string
  triggerType: string // "keyword", "all", etc.
  triggerOperator: string
  triggerValue: string
  // Campos que s√£o parte das configura√ß√µes da inst√¢ncia, mas podem ser espec√≠ficos do bot se a API permitir
  expire?: number
  keywordFinish?: string
  delayMessage?: number
  unknownMessage?: string
  listeningFromMe?: boolean
  stopBotFromMe?: boolean
  keepOpen?: boolean
  debounceTime?: number
  ignoreJids?: string[]
  splitMessages?: boolean
  timePerChar?: number
}

// Interface para as configura√ß√µes globais da inst√¢ncia da Evolution API
export interface EvolutionInstanceSettings {
  expire?: number
  keywordFinish?: string
  delayMessage?: number
  unknownMessage?: string
  listeningFromMe?: boolean
  stopBotFromMe?: boolean
  keepOpen?: boolean
  splitMessages?: boolean
  timePerChar?: number
  debounceTime?: number
  ignoreJids?: string[]
  botIdFallback?: string | null // ID do bot padr√£o/fallback
}

export interface CreateBotResponse {
  success: boolean
  botId?: string
  error?: string
}

// Melhorar a fun√ß√£o getEvolutionConfig para valida√ß√£o mais robusta e logs detalhados

async function getEvolutionConfig() {
  console.log("üîç Buscando configura√ß√£o da Evolution API no banco de dados...")

  const { data, error: dbError } = await supabase
    .from("integrations")
    .select("config")
    .eq("type", "evolution_api")
    .eq("is_active", true)
    .single()

  if (dbError) {
    console.error("‚ùå Erro ao buscar configura√ß√£o no Supabase:", dbError)
    throw new Error(`Erro no banco de dados: ${dbError.message}`)
  }

  if (!data) {
    console.error("‚ùå Configura√ß√£o da Evolution API n√£o encontrada ou n√£o est√° ativa")
    throw new Error(
      "Configura√ß√£o da Evolution API n√£o encontrada. Verifique se est√° configurada no painel de administra√ß√£o.",
    )
  }

  const config = data.config as { apiUrl?: string; apiKey?: string }

  if (!config || typeof config !== "object") {
    console.error("‚ùå Configura√ß√£o inv√°lida:", data.config)
    throw new Error("Configura√ß√£o da Evolution API est√° em formato inv√°lido.")
  }

  if (!config.apiUrl || config.apiUrl.trim() === "") {
    console.error("‚ùå URL da Evolution API n√£o configurada:", config.apiUrl)
    throw new Error("URL da Evolution API n√£o est√° configurada. Configure no painel de administra√ß√£o.")
  }

  if (!config.apiKey || config.apiKey.trim() === "") {
    console.warn("‚ö†Ô∏è Chave da Evolution API n√£o configurada. Requisi√ß√µes podem falhar.")
  }

  console.log("‚úÖ Configura√ß√£o da Evolution API encontrada:")
  console.log("üìç URL:", config.apiUrl)
  console.log("üîë API Key:", config.apiKey ? "Configurada" : "N√£o configurada")

  return config
}

// Melhorar a fun√ß√£o createEvolutionBot com logs detalhados e tratamento de erros robusto

export async function createEvolutionBot(
  instanceName: string,
  botData: EvolutionBotIndividualConfig,
): Promise<CreateBotResponse> {
  // ... (l√≥gica existente, mas usando EvolutionBotIndividualConfig)
  try {
    console.log("ü§ñ Iniciando cria√ß√£o de bot na Evolution API...")
    console.log("üìã Inst√¢ncia:", instanceName)
    console.log("üìã Dados do bot para CRIAR:", JSON.stringify(botData, null, 2))

    const config = await getEvolutionConfig()
    const url = `${config.apiUrl}/evolutionBot/create/${instanceName}`

    console.log("üåê Fazendo requisi√ß√£o POST para:", url)

    const response = await fetch(url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        apikey: config.apiKey || "",
      },
      body: JSON.stringify(botData),
    })

    const responseText = await response.text()
    console.log("üìÑ Corpo da resposta (Cria√ß√£o):", responseText)

    if (!response.ok) {
      console.error("‚ùå Erro da Evolution API (Cria√ß√£o):", responseText)
      return {
        success: false,
        error: `Erro ${response.status}: ${responseText}`,
      }
    }
    const result = JSON.parse(responseText)
    if (!result.id) {
      console.error("‚ùå Resposta n√£o cont√©m ID do bot (Cria√ß√£o):", result)
      return { success: false, error: "Resposta da API n√£o cont√©m ID do bot" }
    }
    return { success: true, botId: result.id }
  } catch (error: any) {
    console.error("‚ùå Erro detalhado ao criar bot:", error)
    if (error.name === "TypeError" && error.message.includes("fetch")) {
      return {
        success: false,
        error:
          "N√£o foi poss√≠vel conectar com a Evolution API. Verifique se o servidor est√° funcionando e a URL est√° correta.",
      }
    }
    return { success: false, error: error.message || "Erro desconhecido ao criar bot na Evolution API" }
  }
}

export async function updateEvolutionBot(
  instanceName: string,
  botId: string,
  botData: EvolutionBotIndividualConfig, // Usar a interface correta
): Promise<boolean> {
  try {
    console.log("üîÑ Atualizando bot na Evolution API...")
    console.log("üìã Inst√¢ncia:", instanceName)
    console.log("üìã Bot ID:", botId)
    console.log("üìã Dados do bot para ATUALIZAR:", JSON.stringify(botData, null, 2))

    const config = await getEvolutionConfig()
    const url = `${config.apiUrl}/evolutionBot/update/${botId}/${instanceName}`

    console.log("üåê Fazendo requisi√ß√£o PUT para:", url)

    const response = await fetch(url, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
        apikey: config.apiKey || "",
      },
      body: JSON.stringify(botData),
    })

    console.log("üì° Status da resposta (Atualiza√ß√£o):", response.status)

    if (!response.ok) {
      const errorText = await response.text()
      console.error("‚ùå Erro ao atualizar bot:", errorText)
      return false
    }

    console.log("‚úÖ Bot atualizado com sucesso")
    return true
  } catch (error: any) {
    console.error("‚ùå Erro ao atualizar bot:", error)
    return false
  }
}

export async function setEvolutionInstanceSettings(
  instanceName: string,
  settingsData: EvolutionInstanceSettings,
): Promise<boolean> {
  try {
    console.log("‚öôÔ∏è Configurando defini√ß√µes da inst√¢ncia na Evolution API...")
    console.log("üìã Inst√¢ncia:", instanceName)
    console.log("üìã Dados das defini√ß√µes:", JSON.stringify(settingsData, null, 2))

    const config = await getEvolutionConfig()
    // O endpoint fornecido √© POST, mesmo para atualizar configura√ß√µes
    const url = `${config.apiUrl}/evolutionBot/settings/${instanceName}`

    console.log("üåê Fazendo requisi√ß√£o POST para:", url)

    const response = await fetch(url, {
      method: "POST", // Conforme a documenta√ß√£o fornecida
      headers: {
        "Content-Type": "application/json",
        apikey: config.apiKey || "",
      },
      body: JSON.stringify(settingsData),
    })

    console.log("üì° Status da resposta (Defini√ß√µes da Inst√¢ncia):", response.status)
    const responseText = await response.text()
    console.log("üìÑ Corpo da resposta (Defini√ß√µes da Inst√¢ncia):", responseText)

    if (!response.ok) {
      console.error("‚ùå Erro ao configurar defini√ß√µes da inst√¢ncia:", responseText)
      return false
    }

    console.log("‚úÖ Defini√ß√µes da inst√¢ncia configuradas com sucesso")
    return true
  } catch (error: any) {
    console.error("‚ùå Erro ao configurar defini√ß√µes da inst√¢ncia:", error)
    return false
  }
}

// deleteEvolutionBot, fetchEvolutionBot, fetchEvolutionBotSettings (c√≥digo existente sem altera√ß√µes)
export async function deleteEvolutionBot(instanceName: string, botId: string): Promise<boolean> {
  try {
    console.log("üóëÔ∏è Deletando bot na Evolution API...")

    const config = await getEvolutionConfig()
    const url = `${config.apiUrl}/evolutionBot/delete/${botId}/${instanceName}`

    console.log("üåê Fazendo requisi√ß√£o para:", url)

    const response = await fetch(url, {
      method: "DELETE",
      headers: {
        apikey: config.apiKey || "",
      },
    })

    console.log("üì° Status da resposta:", response.status)
    return response.ok
  } catch (error: any) {
    console.error("‚ùå Erro ao deletar bot:", error)
    return false
  }
}

export async function fetchEvolutionBot(instanceName: string, botId: string): Promise<any> {
  try {
    console.log("üì• Buscando bot na Evolution API...")

    const config = await getEvolutionConfig()
    const url = `${config.apiUrl}/evolutionBot/fetch/${botId}/${instanceName}`

    console.log("üåê Fazendo requisi√ß√£o para:", url)

    const response = await fetch(url, {
      method: "GET",
      headers: {
        apikey: config.apiKey || "",
      },
    })

    if (!response.ok) {
      console.error("‚ùå Erro ao buscar bot:", response.status)
      return null
    }

    const result = await response.json()
    console.log("‚úÖ Bot encontrado:", result)
    return result
  } catch (error: any) {
    console.error("‚ùå Erro ao buscar bot:", error)
    return null
  }
}

export async function fetchEvolutionBotSettings(instanceName: string): Promise<any> {
  try {
    console.log("‚öôÔ∏è Buscando configura√ß√µes na Evolution API...")

    const config = await getEvolutionConfig()
    const url = `${config.apiUrl}/evolutionBot/fetchSettings/${instanceName}`

    console.log("üåê Fazendo requisi√ß√£o para:", url)

    const response = await fetch(url, {
      method: "GET",
      headers: {
        apikey: config.apiKey || "",
      },
    })

    if (!response.ok) {
      console.error("‚ùå Erro ao buscar configura√ß√µes:", response.status)
      return null
    }

    const result = await response.json()
    console.log("‚úÖ Configura√ß√µes encontradas:", result)
    return result
  } catch (error: any) {
    console.error("‚ùå Erro ao buscar configura√ß√µes:", error)
    return null
  }
}
